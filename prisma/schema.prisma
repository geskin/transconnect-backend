// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  email     String?    @unique
  username  String     @unique
  password  String
  role      Role       @default(USER)
  pronouns  String?
  posts     Post[]     @relation(onDelete: Cascade)
  Profile   Profile?
  resources Resource[]
  comments   Comment[] @relation(onDelete: Cascade)
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean   @default(false)
  authorId  Int
  user      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[] @relation(onDelete: Cascade)  // Ensures comments are deleted when a post is deleted
}

enum Role {
  USER
  ADMIN
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Resource {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String?
  url         String?
  approved    Boolean @default(false)
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  type        Type[]
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String
  resources Resource[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  content   String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  authorId  Int
}
