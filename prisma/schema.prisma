// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  editedAt  DateTime   @default(now()) @db.Timestamp(6)
  email     String?    @unique // @validate(regex: "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$")
  username  String     @unique
  password  String
  pronouns  String?
  bio       String?    @db.VarChar(500)
  role      Role       @default(USER)
  posts     Post[]     
  resources Resource[]
  comments   Comment[] 
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  editedAt  DateTime  @default(now()) @db.Timestamp(6)
  content   String?   @db.VarChar(500)
  // published Boolean   @default(false)
  userId    Int       
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[]
}

enum Role {
  USER
  ADMIN
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] // tags should not reference deleted posts
}

model Resource {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String
  url         String?
  approved    Boolean @default(false)
  userId      Int?    //only necessary if through submission
  user        User?    @relation(fields: [userId], references: [id])
  types       Type[]   //@relation("ResourceTypes")  // Many-to-many relation
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  resources Resource[] //@relation("ResourceTypes")
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  content   String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  authorId  Int
}
